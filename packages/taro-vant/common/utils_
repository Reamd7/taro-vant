import Taro, { getCurrentPages, useDidShow } from "@tarojs/taro";
// import memoize from "fast-memoize";
import classNames from 'classnames';
import _bem from "./utils/bem";
const { useContext, useEffect, useMemo, useState, useCallback } = Taro /** api **/;
import type { CSSProperties } from 'react';
export const isH5 = process.env.TARO_ENV === "h5";
export const isWeapp = process.env.TARO_ENV === "weapp"
export const isAlipay = process.env.TARO_ENV === "alipay" // 不支持scope的能力，需要处理。
export const isExternalClass = isWeapp;
export const isNormalClass = isH5 || process.env.TARO_ENV === "alipay";
export const noop = () => { }

const dpi = 2;
export function addUnit(value?: string | number | null) {
  if (value == null) {
    return undefined;
  } else if (typeof value === "number") {
    return Math.floor(value * getSystemInfoSync().windowWidth / 750 * dpi) + "px"
    // if (isH5) {
    //   return Math.floor(value * getSystemInfoSync().windowWidth / 750  * dpi) + "px"
    // } else {
    //   return (value) + "rpx"
    // }
  } else {
    return value
  }
}

export function CssProperties<T extends CSSProperties>(dict?: T | null | undefined) {
  if (!dict) return {} as T;
  return Object.keys(dict).reduce<T>((res, key) => {
    const value = dict[key]
    if (value != null) res[key] = value;
    return res;
  }, {} as T)
}


export function useMemoAddUnit() {
  const memoMap = useMemo(() => ({}), []);
  return useCallback((value?: string | number | null | undefined) => {
    if (value != undefined) {
      if (memoMap[value]) {
        return memoMap[value]
      } else {
        return (memoMap[value] = addUnit(value))
      }
    }
    return undefined
  }, []);
}

export function useMemoClassNames() {
  return classNames
}

export const bem = _bem



/**
 * TODO hack
 */
export let useScopeRef = isH5 ?
  () => {
    const [state, setState] = useState<any>(
      null
    );
    const scopeRef = useCallback((ref: any) => {
      setState(ref._parentComponent)
    }, [])

    return [state, scopeRef] as const;
  } :
  () => {
    const scope = Taro.useScope();
    return [scope, noop] as const
  }
// export function useScopeRef() {
//   const [state, setState] = useState<any>(
//     (isH5) ? null : Taro.useScope()
//   );

//   const scopeRef = useCallback((ref: any) => {
//     if (isH5) {
//       setState(ref._parentComponent)
//     }
//     // if (ref) {
//     //   if (isWeapp) {
//     //     setState(ref._component)
//     //   } else if (isH5) {
//     //     setState(ref._parentComponent)
//     //   } else if (isAlipay) {
//     //     setState(ref)
//     //   }
//     // }
//   }, [])

//   return [state, scopeRef] as const;
// }
// /**
//  * https://github.com/fjc0k/vtils/blob/v2/packages/taro/src/hooks/useScope.ts#L18
//  */
function _useScope() {
  const [scope, setScope] = useState<any>(null)
  useDidShow(function (this: any) {
    setScope(this.$scope)
  })
  return scope
}
export function useScope() {
  return Taro.useScope ? Taro.useScope() : _useScope()
}


let systemInfo: Taro.getSystemInfoSync.Result | null = null;
export function nextTick(fn: (...args: any[]) => any) {
  if (isWeapp) {
    return Taro.nextTick(fn)
  } else if (isH5) {
    return requestAnimationFrame(fn)
  } else {
    setTimeout(() => {
      fn();
    }, 1000 / 30);
  }
}
export function getSystemInfoSync() {
  if (systemInfo == null) {
    systemInfo = Taro.getSystemInfoSync();
  }
  return systemInfo;
}
export function pxUnit(value: number) {
  return (value * getSystemInfoSync().pixelRatio / dpi) + "px"
}

const __requestAnimationFrame__ = function (fn: (...args: any[]) => any) {
  // const el = Taro
  //   .createSelectorQuery()
  //   .selectViewport()
  //   .boundingClientRect();
  // console.log(performance.now())
  // if (Info.platform === 'devtools') {
  //   return nextTick(cb);
  // }
  // return el.exec(() => {
  //   fn();
  // });
  return setTimeout(fn, 1000 / 30);
};

export const requestAnimationFrame = function (fn: (...args: any[]) => any) {
  if (isH5) {
    return window.requestAnimationFrame(fn) || __requestAnimationFrame__(fn)
  } else {
    return __requestAnimationFrame__(fn)
  }
};

export const cancelAnimationFrame = function (id: ReturnType<typeof requestAnimationFrame>) {
  if (isH5) {
    window.cancelAnimationFrame ? window.cancelAnimationFrame(id) : clearTimeout(id);
  } else {
    clearTimeout(id);
  }
}
// export function requestAnimationFrame(cb: Function) {
//   // const Info = systemInfo || (systemInfo = getSystemInfoSync());
//   // const el = Taro
//   //   .createSelectorQuery()
//   //   .selectViewport()
//   //   .boundingClientRect();
//   // console.log(performance.now())
//   // if (Info.platform === 'devtools') {
//   return nextTick(cb);
//   // }
//   // return el.exec(() => {
//   //   cb();
//   // });
// }

export function getCurrentPage() {
  const pages = getCurrentPages(); // weapp + h5 都支持
  if (pages.length > 0) {
    return pages[pages.length - 1]
  } else {
    return null
  }
}

export function getContext() {
  const page = getCurrentPage();
  if (page) {
    if (process.env.TARO_ENV === "h5") {
      return page.$router.path // TODO 坑
    }
    return page.route
  } else {
    return null;
  }
}

const NullContext = Taro.createContext(null);

export function GroupContextCreator<T>(ComponentName: string) {
  const RelationMap = new Map<string, Taro.Context<T>>();

  const useGroupContainerContext = function (id: string, defaultValue: T) {
    const page = getContext()
    const key = page ? `${id}${ComponentName}${page}` : null;

    const Context = useMemo(() => {
      if (key) {
        const val = RelationMap.get(key);

        if (val) {
          return val
        } else {
          const context = Taro.createContext<T>(defaultValue);
          RelationMap.set(key, context);

          return context;
        }
      } else {
        return null
      }
    }, [key]);

    useEffect(() => {
      return function () {
        if (key) {
          RelationMap.delete(key)
        }
      }
    }, [key])
    return Context;
  }

  function useGroupItemContext(id: undefined): null
  function useGroupItemContext(id: string): T
  function useGroupItemContext(id: string | undefined): T | null
  function useGroupItemContext(id: string | undefined) {
    const page = getContext()
    const key = page ? `${id}${ComponentName}${page}` : null;
    // const Context = useMemo(() => {
    //   if (key) {
    //     const val = RelationMap.get(key);

    //     if (val) {
    //       return val
    //     } else {
    //       throw `ID = ${id} ${ComponentName} 组件未挂载？`
    //       // return null;
    //     }
    //   } else {
    //     throw `ID = ${id} ${ComponentName} 组件未挂载！`
    //     // return null
    //   }
    // }, [key]);
    return useContext(id === undefined ? NullContext :
      key ? RelationMap.get(key) || NullContext : NullContext
    )
  }

  return {
    useGroupContainerContext,
    useGroupItemContext
  } as const
}

export function createSelectorQuery(scope: any) {
  return (isAlipay) ? (
    (my.createSelectorQuery() as any).in(scope) as Taro.SelectorQuery
  ) : Taro.createSelectorQuery()
    .in(scope)
}

export function getRect(
  scope: any,
  selector: string
): Promise<Taro.NodesRef.BoundingClientRectCallbackResult> {
  return new Promise<Taro.NodesRef.BoundingClientRectCallbackResult>((resolve) => {
    createSelectorQuery(scope)
      .select(selector)
      .boundingClientRect()
      .exec((rect = []) => resolve(rect[0]));
  });
}
export function getAllRect(
  scope: any,
  selector: string
): Promise<Taro.NodesRef.BoundingClientRectCallbackResult[]> {
  return new Promise<Taro.NodesRef.BoundingClientRectCallbackResult[]>((resolve) => {
    createSelectorQuery(scope)
      .selectAll(selector) // 一定要这样写，支付宝需要这样写。。
      .boundingClientRect()
      .exec((rects) => {
        const rect = rects[0]
        if (Array.isArray(rect) && rect.length) {
          resolve(rect)
        }
      });
  });
}
export function range(num: number, min: number, max: number) {
  return Math.min(Math.max(num, min), max);
}

export type ActiveProps<P, K extends keyof P> = Omit<P, K> & Required<Pick<P, K>> & {
  children?: React.ReactNode
};

export function ExtClass<P extends any>(props: P, classNames: keyof P): string | undefined {
  const _class = classNames as string;
  const isnormalclassname = !(_class).includes("-"); // _class => className（nor）

  const classNamesMap = (isnormalclassname ? {
    nor: _class,
    ext: _class === "className" ? 'custom-class' : _class.replace(/[A-Z]/g, (v) => "-" + v.toLowerCase())
  } : {
      nor: _class === 'custom-class' ? 'className' : _class.replace(/-(.)/g, (v) => v[1].toUpperCase()),
      ext: _class
    })

  if (isNormalClass) return props[classNamesMap.nor];
  return props[classNamesMap.ext]
}
